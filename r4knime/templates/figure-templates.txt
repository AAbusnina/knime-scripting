########################################################################################
# name: Bar Plot
# author: Holger Brandl
# category: basic/barplots
# preview: simplebarplot.png

Creates a barplot. This can be used to visualize zscores, CVs, etc.

Inputs:
1) A numerical variable. Each observation/well/phenotype will result in one bar
2) A factor that is used to label each bar.

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>
# 1) Define your numerical attribute of interest
numVarName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Numerical attribute"/>;
numVariable = kIn[, which(names(kIn)==numVarName)];

# 2) Define the label-column (factor)
labelVariable = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="Factor"/>;

# (optional) title
title=<textfield label="Title" var="plotTitle" data-type="text" default-value="" size="10"
           enabled="dfdf" span="full"/>;

</group>


<![CDATA[

#yAxisRange <- c( 0.0, 200.0)
if(!exists("yAxisRange")) yAxisRange = NULL


par(oma=c(8,1,1,1)); # the 3 defines the length of the labels, just increase it if necessary

barplot(numVariable, ylab= numVarName, ylim = yAxisRange, names.arg = labelVariable, main= plotTitle, las = 2, col = c('lightblue'));

]]>

</rgg>




########################################################################################
# name: Bar Plot Grid
# author: Holger Brandl
# category: basic/barplots

Creates a grid containing a number of barplots. This can be used to visualize zscores, CVs, etc.

1) A selection of numerical variables. Each variable will result in a subplot.

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define your numerical attribute of interest
params = which(names(kIn) %in% c(<panellistbox label="Numerical attributes" items="$$$NUM_ATTRIBUTES$$$"
                                             span="full"/>));
<gaprow height="2"/>

# b) Define the (factor)
labelVariable = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" selected-item="barcode" label="Factor"/>;

</group>


<![CDATA[

numGridRows = ifelse(length(params) > 1, 2, 1);
par(mfrow = c(numGridRows, ceiling(length(params) / numGridRows)))
par(oma=c(1,1,1,1)); # the 3 defines the length of the labels, just increase it if necessary

# iterate over all parameters and create plots for all of them
lapply(params, FUN = function (param) {

	barplot(eval(parse(text = paste("kIn$\"", names(kIn)[param], "\"", sep = ''))), names.arg = labelVariable, las = 2, col = c('lightblue'));
	title(names(kIn[param]));
})


]]>

</rgg>




########################################################################################
# name: Histogram (Simple)
# author: Holger Brandl
# category: basic/histograms
# preview: simple-histogram.png

Displays a histogram (distribution) of a numerical attribute

Parameter:
variable of interest: vector from which the histgram is calculated.
lower bound: ... is the lower bound of the x axis, default is minimum value found in the variable of interest.
upper bound: ... is the upper bound of the x axis, default is maximum value found in the variable of interest.
number of bins: the bin centers are linearly spaced between upper and lower bound.

######

<rgg>

    <!--1. Title and short description -->

    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
    <gaprow height="1"/>


    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    # 1. Parameter selection
    <group>
    numAttributeName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Variable of interest"/>;
    <textfield label="Lower x axis bound" var="lowerBound" data-type="number" span="full"/>
    <textfield label="Upper x axis bound" var="upperBound" data-type="number" span="full"/>
    <textfield label="Number of bins" var="nBins" data-type="number" default-value="20" span="full"/>
    <textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "my plot" size="10" span="full"/>
    </group>


     <!-- 2. r code-->

    <![CDATA[
    library('matlab')

    numAttribute = eval(parse(text = paste("kIn$\"", numAttributeName, "\"", sep = '')))
    lowerBound = as.numeric(lowerBound)
    lowerBound[is.na(lowerBound)] = min(numAttribute)
    upperBound = as.numeric(upperBound)
    upperBound[is.na(upperBound)] = max(numAttribute)
    breaks = linspace(lowerBound, upperBound, as.numeric(nBins));

    hist(numAttribute, breaks, density=30.0, angle=45, xlab=numAttributeName, main=plotTitle );
    ]]>

</rgg>




########################################################################################
# name: Histogram (beautified)
# author: Holger Brandl
# category: basic/histograms
# preview: histogram-single-ggplot.png

Displays a histogram (distribution) of a numerical attribute

######

<rgg>


    <!--1. Title and short description -->

    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
    <gaprow height="1"/>

    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    # 1. Parameter selection
    <group>
    # a) Define the attribute of interest
    numAttributeName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Variable of interest"/>;

    # c) the title of the plot
    <textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "my plot" size="10" span="full"/>
    </group>


    # 2. r-code

    <![CDATA[

    library(ggplot2);


    replaceInvalidVarNameChars <- function(x){
        gsub("[)]", "_", gsub("[(]", "_", gsub("[/]", "_", gsub("[+]", "_", gsub("-", "_", gsub(" ", "_",x))))))
    }

    # convert operator chars in attribute names to underscores
    numAttributeNameFixed <- replaceInvalidVarNameChars(numAttributeName)
    names(kIn) <- replaceInvalidVarNameChars(names(kIn));


    #calculate the range manually
    varVect = eval(parse(text = paste("kIn$\"", numAttributeNameFixed, "\"", sep = '')));
    dataRange = range(varVect, na.rm=TRUE);
    rangeWidth = dataRange[2] - dataRange[1];

    m <- ggplot(kIn, aes_string(x= numAttributeNameFixed)) + geom_histogram(binwidth= rangeWidth/numBins) + geom_density();

    # add title and proper label
    m <- m +  opts(title = plotTitle) + xlab(numAttributeName);

    # print it
    print(m, newpage=FALSE, pretty=FALSE)

    ]]>

</rgg>




########################################################################################
# name: Histogram grid
# author: Holger Brandl
# category: basic/histograms
# preview: histogram-grid.png



Creates a grid containing a number densityplots, each for a different feature dimension. Within each plot the densities are factorized according to a chosen grouping factor.

1) A selection of numerical variables. Each variable will result in a subplot. 

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define your numerical attribute of interest
params = which(names(kIn) %in% c(<panellistbox label="Numerical attributes" items="$$$NUM_ATTRIBUTES$$$"
                                             span="full"/>));

# c) Define the number of bins
numBins = as.numeric(<textfield label="Number of bins" var="" data-type="number" default-value= "30" size="10" span="full"/>);

</group>


<![CDATA[

library(ggplot2);


# convert operator chars in attribute names to underscores
replaceInvalidVarNameChars <- function(x){
    gsub("[)]", "_", gsub("[(]", "_", gsub("[/]", "_", gsub("[+]", "_", gsub("-", "_", gsub(" ", "_",x))))))
}

origNames <- names(kIn);
names(kIn) <- replaceInvalidVarNameChars(names(kIn));


numGridRows = ifelse(length(params) > 1, 2, 1);
numGridCols = ceiling(length(params) / numGridRows);

grid.newpage()
pushViewport(viewport(layout=grid.layout(numGridRows, numGridCols)));

vplayout<-function(x,y) viewport(layout.pos.row = x, layout.pos.col=y);

# iterate over all parameters and create plots for all of them

lapply(params, FUN = function (param) {

	varName = names(kIn)[param];
	varVect = eval(parse(text = paste("kIn$\"", varName, "\"", sep = '')));
	dataRange = range(varVect, na.rm=TRUE);
	rangeWidth = dataRange[2] - dataRange[1];

	m <- ggplot(kIn, aes_string(x= names(kIn)[param])) + geom_histogram(binwidth= rangeWidth/numBins) + geom_density();

    #set the title to the unmodified attribute-name
    m <- m + xlab(origNames[param]);

	plotNum<- which(params== param);
	curRow <- ceiling(plotNum/numGridCols);
	curCol <- ceiling(plotNum - numGridCols*(curRow-1));

	print(m, vp=vplayout(curRow, curCol));
});


]]>

</rgg>




########################################################################################
# name: Factorized density grid
# author: Holger Brandl
# category: basic/histograms
# preview: factorized_density_plot_grid.png

Creates a grid containing a number of d, each for a different feature dimension

1) A selection of numerical variables. Each variable will result in a subplot. Each observation/well/phenotype will result in one bar.
2) A factor that is used to label each bar.

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define your numerical attribute of interest
params = which(names(kIn) %in% c(<panellistbox label="Numerical attributes" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));
<gaprow height="2"/>

# b) Define the grouping factor
factorIndex = which(names(kIn) %in% c(<combobox items="$$$STR_ATTRIBUTES$$$" selected-item="barcode" label="Factor"/>));

</group>


<![CDATA[


# b) Define the (factor)
factorVariable = eval(parse(text = paste("kIn$\"", names(kIn)[factorIndex], "\"", sep = '')));

library(ggplot2)

plotData <- kIn
origNames <- names(kIn);

names(plotData) <- paste("p", as.character(1:length(names(plotData))), sep ='')
factorName =names(plotData)[factorIndex];


numGridRows = ifelse(length(params) > 1, 2, 1);
numGridCols = ceiling(length(params) / numGridRows);

grid.newpage()
pushViewport(viewport(layout=grid.layout(numGridRows, numGridCols)));

vplayout<-function(x,y) viewport(layout.pos.row = x, layout.pos.col=y);

# iterate over all parameters and create plots for all of them

lapply(params, FUN = function (param) {

	m <- ggplot(plotData, aes_string(x= names(plotData)[param], fill= names(plotData)[factorIndex])) +  geom_density(alpha= 0.4);

	#set the title to the unmodified attribute-name
    m <- m + xlab(origNames[param]) + labs(fill = names(kIn)[factorIndex]);

	if(length(levels(factor(factorVariable))) < 7){
		m <- m + scale_colour_brewer("clarity");
	}

	plotNum<- which(params== param);
	curRow <- ceiling(plotNum/numGridCols);
	curCol <- ceiling(plotNum - numGridCols*(curRow-1));

	print(m, vp=vplayout(curRow, curCol));
});

]]>

</rgg>




########################################################################################
# name: 2-Factor Barplot
# author: Holger Brandl
# category: basic/barplots

A barplot of a single attribute which is barplotted after being grouped according to 2 different factors (like barcode and treatment).

######


<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>
plotTitle = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Parameter of Interest"/>;
selParam = eval(parse(text = paste("kIn$\"", plotTitle, "\"", sep = '')));

xFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis factor"/>;
xSubFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis sub-factor"/>;

doRotateLabels =  <checkbox label="Rotate Labels" span="2"/>;

doFlipCoord = <checkbox label="Flip Coordinate Axes" span="2"/>;


<!--# b. Customize the title-->
<!--<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "deparse(selParam)" size="10"-->
           <!--enabled="dfdf" span="full"/>-->
</group>


# 2. r-code


<![CDATA[

library(ggplot2)

barplot = qplot(factor(xFac), data=kIn, geom="bar", , fill=factor(xSubFac), stat="identity", y= selParam, position="dodge") + opts(title = plotTitle)

#change the color scale
barplot = barplot + scale_colour_brewer(type="qual");

if(doFlipCoord){
    barplot = barplot+coord_flip();
}

if(doFlipCoord){
    barplot = barplot + opts(axis.text.x=theme_text(angle=-90, hjust=0));
}

# make the plot visisble
print(barplot, newpage=FALSE, pretty=FALSE);


]]>

</rgg>




########################################################################################
# name: 2-Factor Barplot with Errors
# author: Holger Brandl
# category: basic/barplots


A barplot of a single attribute which is barplotted after being grouped according to 2 different factors.

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>
plotTitle = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Parameter of Interest"/>;
selParam = eval(parse(text = paste("kIn$\"", plotTitle, "\"", sep = '')));

errorParName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="SD of Parameter of Interest"/>
selParamSD = eval(parse(text = paste("kIn$\"", errorParName, "\"", sep = '')));

xFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis factor"/>;
xSubFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis sub-factor"/>;

doRotateLabels =  <checkbox label="Rotate Labels" span="2"/>;

doFlipCoord = <checkbox label="Flip Coordinate Axes" span="2"/>;


<!--# 2. Customize the title-->
<!--<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "deparse(selParam)" size="10"-->
           <!--enabled="dfdf" span="full"/>-->
</group>

# 2. r-code


<![CDATA[


library(ggplot2)
limits = aes(ymax = selParam + selParamSD, ymin=selParam - selParamSD)

barplot = qplot(factor(xFac), data=kIn, geom="bar", , fill=factor(xSubFac), stat="identity", y= selParam, position="dodge") + opts(title = plotTitle) + scale_colour_brewer(type="seq");

# add errors
dodge <- position_dodge(width=0.9);
barplot = barplot + geom_errorbar(limits, position=dodge, width=0.25);

#change the color scale
barplot = barplot + scale_colour_brewer(type = "qual")

if(doFlipCoord){
    barplot = barplot+coord_flip();
}

if(doFlipCoord){
    barplot = barplot + opts(axis.text.x=theme_text(angle=-90, hjust=0));
}

# make the plot visisble
print(barplot, newpage=FALSE, pretty=FALSE);


]]>

</rgg>




########################################################################################
# name: 3-Factor Barplot
# author: Holger Brandl
# category: basic/barplots


A barplot of a single attribute which is grouped according to 3 different factors.
This will generate a 2d-grid with the levels of the first factor on the x- and the levels of the second factor on the y-axis.

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

plotTitle = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Parameter of Interest"/>;
selParam = eval(parse(text = paste("kIn$\"", plotTitle, "\"", sep = '')));

xGroupFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="Toplevel-grouping factor"/>;
xFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis factor"/>;
xSubFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis sub-factor"/>;

doRotateLabels =  <checkbox label="Rotate Labels" span="2"/>;

doFlipCoord = <checkbox label="Flip Coordinate Axes" span="2"/>;

<!--# 2. Customize the title-->
<!--<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "deparse(selParam)" size="10"-->
           <!--enabled="dfdf" span="full"/>-->
</group>


# 2. r-code

<![CDATA[

kIn$xGrouping <- xGroupFac;

library(ggplot2)

barplot = qplot(factor(xFac), data=kIn, geom="bar", , fill=factor(xSubFac), stat="identity", y= selParam, position="dodge") + facet_wrap( ~ xGrouping) + opts(title = plotTitle);


#change the color scale
barplot = barplot + scale_colour_brewer(type = "qual")


if(doFlipCoord){
    barplot = barplot+coord_flip();
}

if(doFlipCoord){
    barplot = barplot + opts(axis.text.x=theme_text(angle=-90, hjust=0));
}

# make the plot visisble
print(barplot, newpage=FALSE, pretty=FALSE);

]]>

</rgg>


########################################################################################
# name: 3-Factor Barplot with Errors
# author: Holger Brandl
# category: basic/barplots


A barplot of a single attribute which is grouped according to 3 different factors.
This will generate a 2d-grid with the levels of the first factor on the x- and the levels of the second factor on the y-axis.


######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

plotTitle = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Parameter of Interest"/>;
selParam = eval(parse(text = paste("kIn$\"", plotTitle, "\"", sep = '')));

errorParName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="SD of Parameter of Interest"/>
selParamSD = eval(parse(text = paste("kIn$\"", errorParName, "\"", sep = '')));

xGroupFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="Toplevel-grouping factor"/>;
xFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis factor"/>;
xSubFac = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis sub-factor"/>;

doRotateLabels =  <checkbox label="Rotate Labels" span="2"/>;

doFlipCoord = <checkbox label="Flip Coordinate Axes" span="2"/>;


<!--# 2. Customize the title-->
<!--<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "deparse(selParam)" size="10"-->
           <!--enabled="dfdf" span="full"/>-->

</group>


# 2. r-code


<![CDATA[

library(ggplot2)

kIn$xGrouping <- xGroupFac;
limits = aes(ymax = selParam + selParamSD, ymin=selParam - selParamSD)

barplot = qplot(factor(xFac), data=kIn, geom="bar", , fill=factor(xSubFac), stat="identity", y= selParam, position="dodge") + facet_wrap( ~ xGrouping) + opts(title = plotTitle);

# add errors
dodge <- position_dodge(width=0.9);
barplot = barplot + geom_errorbar(limits, position=dodge, width=0.25);


#change the color scale
barplot = barplot + scale_colour_brewer(type = "qual")

if(doFlipCoord){
    barplot = barplot+coord_flip();
}

if(doFlipCoord){
    barplot = barplot + opts(axis.text.x=theme_text(angle=-90, hjust=0));
}

# make the plot visisble
print(barplot, newpage=FALSE, pretty=FALSE);

]]>

</rgg>



########################################################################################
# name: Boxplot
# author: Holger Brandl
# category: basic/boxplots
# preview: simpleboxplot.png

A simple box plot

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>


numAttributeName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Numeric variable"/>;
numAttribute = kIn[,which(names(kIn) == numAttributeName)];

rawFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis factor"/>;
factor = factor(rawFactor, levels=unique(rawFactor));



useVerticalLabels =  <checkbox label="Use vertical labels" span="2" selected="false"/>;

<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value= "" size="10" span="full"/>

</group>


# 2. r-code

<![CDATA[


par(oma=c(7,1,1,1)); # the 3 defines the length of the labels, just increase it if necessary

#yAxisRange <- c( 0.0, 200.0)
if(!exists("yAxisRange")) yAxisRange = NULL

boxplot(numAttribute ~ factor, main =plotTitle, col = c('lightblue'), ylim = yAxisRange, ylab = numAttributeName, las = ifelse(useVerticalLabels, 2, 1));

]]>

</rgg>




########################################################################################
# name: Cleveland Dot Plot
# author: Holger Brandl
# category: basic/others

######

dotchart($$ATTRIBUTE$, pch='*', "xlab="my label")




########################################################################################
# name: Association Plot
# author: Holger Brandl
# category: basic/others

######

% insert a list of numerical attributes
assocplot(cbind($$ATTRIBUTES$), space=0.5, col=c("black", "red"))




########################################################################################
# name: Notched Boxplot
# author: Holger Brandl
# category: basic/boxplots
# preview: notched-boxplot.png

A boxplot with notches that indicate significant differences of the median between groups in case of equal sample sizes. Refer to the R-documentation or further details.

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

numAttribute = kIn$<combobox items="$$$NUM_ATTRIBUTES$$$" label="Numeric variable"/>;

# make sure that the sorting of the data is being preserved
rawFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="x-axis factor"/>;
factor = factor(rawFactor, levels=unique(rawFactor));

<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value="" size="10" span="full" />

useVerticalLabels =  <checkbox label="Use vertical labels" span="2" selected="false"/>;

</group>


# 2. r-code

<![CDATA[

boxplot(numAttribute ~ factor, notch = TRUE, main = plotTitle, las = ifelse(useVerticalLabels, 2, 1));

]]>

</rgg>




########################################################################################
# name: Parallel Boxplot grid
# author: Holger Brandl
# category: basic/boxplots
# preview: lattice-boxplotgrid.png

A grid of parallel boxplots.

Inputs
1) A categorial variable which defines the number of parallel boxplots
2) Another categorical variable that defines the grouping of observations into the different grids
3) Your assay-parameter of interest

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

numAttributeName = <combobox items="$$$NUM_ATTRIBUTES$$$" label="Variable of interest"/>;

# make sure that the sorting of the data is being preserved
rawFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="X-axis factor"/>;
parallelFactor = factor(rawFactor, levels=unique(rawFactor));

gridFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="Grid-factor"/>;
</group>


# 2. r-code

<![CDATA[

# make sure that you've installed the lattice package in beforehand
library(lattice)

numAttribute = eval(parse(text = paste("kIn$\"", numAttributeName, "\"", sep = '')))

m <- bwplot(factor(parallelFactor) ~ numAttribute | factor(gridFactor), xlab = numAttributeName);

print(m, newpage=FALSE, pretty=FALSE);


]]>

</rgg>




########################################################################################
# name: Multi-parameteric parallel boxplot grid 
# author: Holger Brandl
# category: basic/boxplots
# preview: multipar-boxplotgrid.png


A grid of parallel boxplots, one for each selected assay parameter. The number of actual parallel boxplots is defined by a categorical variable (like a well-treatment)


######



<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define your categorical variable of interest
# make sure that the sorting of the data is being preserved
rawFactor = kIn$<combobox items="$$$STR_ATTRIBUTES$$$" label="X-axis factor"/>;
catVar = factor(rawFactor, levels=unique(rawFactor));



# b) Define your assay parameters of interest
params =  which(names(kIn) %in% c(<panellistbox label="Assay parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));

</group>


# 2. r-code

<![CDATA[

# slim down your dataset if necessary
#kIn <- subset(kIn, treatment != "jak3 inhibitor" && librarycode == "ADD");

numGridRows = 2;
par(mfrow = c(numGridRows, ceiling(length(params) / numGridRows)))
par(oma=c(1,3,1,1)); # the 3 defines the length of the labels, just increase it if necessary

# iterate over all parameters and create plots for all of them
lapply(params, FUN = function (param) {

	boxplot(eval(parse(text = paste("kIn$\"", names(kIn)[param], "\"", sep = ''))) ~ catVar, horizontal = TRUE, las = 2, col = c('lightblue') )
	title(names(kIn[param]));

})

]]>

</rgg>




########################################################################################
# name: Group means parallel-plot
# author: Holger Brandl, Antje Niederlein              
# category: screening/profiles
# preview: group_means_parallel_plot.png

A parallel plot (aka profile plot) of means of different groups with errors bars

Inputs
1) a grouping variable
2) a selection of assay parameters

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) define your grouping variable
catVar = <combobox items="$$$STR_ATTRIBUTES$$$" label="Categorical variable of interest"/>

# b) define your parameters of interest
parameters =  c(<panellistbox label="Assay parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

</group>


# 2. r-code

<![CDATA[

library(ggplot2)
library(reshape)

#classesOfInterest <- c("library", "dmso", "jak3 inhibitor", "nocodacol");
# or use this if you would like to include all classes
classesOfInterest <- levels(factor(kIn[,catVar]))

# create a subset ony containing entries with classes of interest and parameters of interest
subData <- subset(kIn, get(catVar) %in% classesOfInterest)
subData <- subData[, c(catVar,parameters)]

# reshape data for ggplot
plotData <- melt(subData, id = catVar)

# methods to calculate errorbars
errorUpper <- function(x){
        x.mean <- mean(x, na.rm = TRUE)
        x.sd <- sd(x, na.rm = TRUE)
        return(x.mean + x.sd)
}

errorLower <- function(x){
        x.mean <- mean(x, na.rm = TRUE)
        x.sd <- sd(x, na.rm = TRUE)
        return(x.mean - x.sd)
}

# plot
p <- ggplot(plotData, aes(x = variable, y = value, colour = get(catVar), group = get(catVar))) 
p <- p + stat_summary(fun.y = mean, geom = "line") 
p <- p + stat_summary(fun.ymax = errorUpper, fun.ymin = errorLower, geom = "errorbar", width=0.25)
p <- p + labs(x = "Parameters", y = "", colour = catVar)
p <- p + opts(axis.text.x = theme_text(hjust = 1, angle = 90))
print(p)



]]>

</rgg>




########################################################################################
# name: Parallel plot grid by factor
# author: Holger Brandl, Antje Niederlein
# category: screening/profiles
# preview: parallel-plot-grid-by-factors.png

A grid of parallel plots where each plot displays a parameter profile for all data points belonging to the same group. Additionally the mean of the data set is shown including error-bars.

Inputs:
1) A categorical variable which superimposes a grouping on your dataset
1) A collection of assay parameters

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# which column used for grouping
<combobox var = "catVar" label = "Column used for grouping" items = "$$$STR_ATTRIBUTES$$$"/>

# b) define your parameters of interest
parameters = c(<panellistbox label="Assay parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>)

# where to draw a horizontal line
<textfield var="hline"  label="Horizontal line drawn at" data-type="number" default-value="0"/>

# c) define a title for the plot
<textfield label="y-axis label" var="yLabel" data-type="text" default-value= "" size="10" span="full"/>

</group>


# 2. r-code

<![CDATA[

library(ggplot2)
library(reshape)

# methods to calculate errorbars
errorUpper <- function(x){
        x.mean <- mean(x, na.rm = TRUE)
        x.sd <- sd(x, na.rm = TRUE)
        return(x.mean + x.sd)
}

errorLower <- function(x){
        x.mean <- mean(x, na.rm = TRUE)
        x.sd <- sd(x, na.rm = TRUE)
        return(x.mean - x.sd)
}

#classesOfInterest <- c("library", "dmso", "jak3 inhibitor", "nocodacol");
# or use this if you would like to include all classes
classesOfInterest <- levels(factor(kIn[,catVar]))

# make sure that hline is a number
hline <- as.numeric(hline)

# create a subset ony containing entries with classes of interest and parameters of interest
subData <- subset(kIn, get(catVar) %in% classesOfInterest)
subData <- subData[, c(catVar,parameters)]
# set rowID as extra column for reshaping
subData$id <- rownames(subData)

# reshape data for ggplot
plotData <- melt(subData, id = c(catVar,"id"))
plotData <- plotData[complete.cases(plotData),]
names(plotData)[which(names(plotData) == catVar)] <- "catVar"

p <- ggplot(plotData, aes(x = variable, y = value, group = catVar)) + geom_line(aes(group = id), colour = "grey") + geom_point(aes(group = id), colour = "grey")
p <- p + stat_summary(fun.y = mean, geom = "line", colour = "red")
p <- p + stat_summary(fun.ymax = errorUpper, fun.ymin = errorLower, geom = "errorbar", width=0.25, colour = "red")
p <- p + geom_hline(yintercept=hline, linetype = "dashed")
p <- p + labs(x = "Parameters", y = yLabel)
p <- p + opts(axis.text.x = theme_text(hjust = 1, angle = 90)) 
p <- p + facet_wrap(~ catVar)
print(p)

]]>

</rgg>






########################################################################################
# name: QQ-Plot grid
# author: Holger Brandl
# category: screening/hits
# preview: qq-plot.png

Creates a trellis of qq-plots (with respect to normal distribution) which allow to visually determine which parameters follow a normal distribution

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="1"/>


<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# b. Select the parameter of interest
<label text="Select your parameters for which you would like to see a qq-plots"/>
selReadouts = c(<panellistbox label="Parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>) ;

<!--<combobox var="refDist" label="Reference distribution" items="Normal,Poisson" />-->
<!--<hbox>-->
<!--<radiobutton label="Normal" var="refDist" button-group="refDistSelect" selected="TRUE"-->
<!--return-value-by-selected="pnorm"/>-->
<!--<radiobutton label="Poisson" var="refDist" button-group="refDistSelect" selected="f"-->
<!--return-value-by-selected="possion"/>-->
<!--</hbox>-->

# b. Customize the title
<textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value="My qq-plot" size="10" enabled="dfdf" span="full"/>

</group>


# 2. r-code

<![CDATA[

#selReadouts = c("numberofcells.zscore", "meannumberdroplets.zscore", "medianintensityofdroplets.zscore");

numGridRows = ifelse(length(selReadouts) > 1, 2, 1);
par(mfrow = c(numGridRows, ceiling(length(selReadouts) / numGridRows)));

#par(oma=c(1,1,1,1)); # the 3 defines the length of the labels, just increase it if necessary

# iterate over all parameters and create plots for all of them
lapply(selReadouts, FUN = function (param) {
		plotVar = eval(parse(text = paste("kIn$\"", param, "\"", sep = '')));
    qqnorm( plotVar,  main = param);
    qqline(plotVar);

   	# subsample if necessary (because sw can just work up to 3000 sample size)
	if(length(plotVar) > 2000){
		plotVar <- sample(plotVar, 2000)
	}

     # do the test and add the p-value to the plot
    testresult <- shapiro.test(plotVar);


    # use relative positioning of the text (http://www.mail-archive.com/r-help@r-project.org/msg15119.html)
    usr <- par("usr")                       # get user coordinates
    par(usr = c(0, 1, 0, 1))               # new relative user coordinates
    text(0.75,0.05, format(testresult$p.value, scientific=TRUE, digits=4), cex=1.5, col=2);   # if that's what you want
    par(usr = usr)                         # restore original user coordinates
})

]]>

</rgg>




########################################################################################
# name: Correlogram with p-values
# author: Holger Brandl
# category: relations
# preview: correlation-scattermatrix+pvalues.png

Visualization of a Correlation Matrix. On top the (absolute) value of the correlation plus the result of the cor.test as stars. On botttom, the bivariate scatterplots, with a fitted line.

Source: http://addictedtor.free.fr/graphiques/RGraphGallery.php?graph=137

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="3"/>


<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define which parameters you would like to visualize
params =  which(names(kIn) %in% c(<panellistbox label="Parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));

</group>


# 2. r-code

<![CDATA[
subScreen = kIn[, params];

panel.cor <- function(x, y, digits=2, prefix="", cex.cor)
{
    usr <- par("usr"); on.exit(par(usr))
    par(usr = c(0, 1, 0, 1))
    r <- cor(x, y, use="complete.obs")
    absCor <- abs(r);
    txt <- format(c(r, 0.123456789), digits=digits)[1]
    txt <- paste(prefix, txt, sep="")
    if(missing(cex.cor)) cex <- 0.8/strwidth(txt)

    test <- cor.test(x,y, na.action = na.exclude)
    # borrowed from printCoefmat
    Signif <- symnum(test$p.value, corr = FALSE, na = FALSE,
                  cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
                  symbols = c("***", "**", "*", ".", " "))

    text(0.5, 0.5, txt, cex = cex * absCor)
    text(.8, .8, Signif, cex=cex, col=2)
}
pairs(subScreen, lower.panel=panel.smooth, upper.panel=panel.cor)


]]>

</rgg>




########################################################################################
# name: Correlogram
# author: Holger Brandl
# category: relations
# preview: correlogram.png

Produces a graphical display of a correlation matrix, called a correlogram. The cells of the matrix can be shaded or colored to show the correlation value. 

Source: http://addictedtor.free.fr/graphiques/RGraphGallery.php?graph=148

######

<rgg>

<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="3"/>


<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define which parameters you would like to visualize
params =  which(names(kIn) %in% c(<panellistbox label="Parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));

# a)  (optional) title
title=<textfield label="Title" var="plotTitle" data-type="text" default-value="" size="10"
           enabled="dfdf" span="full"/>;
</group>


# 2. r-code

<![CDATA[

subScreen = kIn[, params];

require( corrgram );


corrgram(kIn[,params], order=TRUE, row1attop=FALSE,
         main=plotTitle,
         upper.panel=panel.ellipse,
		 lower.panel=panel.pts,
		 diag.panel=panel.minmax)

]]>

</rgg>




########################################################################################
# name: Correlogram (colored ellipses)
# author: Holger Brandl
# category: relations
# preview: ellipse-correlogram.png

Produces a graphical display of a correlation matrix, called a correlogram. The cells of the matrix can be shaded or colored to show the correlation value.

Source: http://addictedtor.free.fr/graphiques/RGraphGallery.php?graph=149

######

<rgg>


<!--1. Title and short description -->

<h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
<gaprow height="3"/>

<!-- 2. Configuration-->

<separator label="Options" span="full"/>
<gaprow height="2"/>

# 1. Parameter selection

<group>

# a) Define which parameters you would like to visualize
params =  which(names(kIn) %in% c(<panellistbox label="Parameters of interest" items="$$$NUM_ATTRIBUTES$$$" span="full"/>));

</group>


# 2. r-code

<![CDATA[

library(package="ellipse")

subR <- kIn[,params];

correl <- cor(subR, use="complete.obs")
ord <- order(correl[1,])
xc <- correl[ord, ord]
colors <- c("#A50F15","#DE2D26","#FB6A4A","#FCAE91","#FEE5D9","white","#EFF3FF","#BDD7E7","#6BAED6","#3182BD","#08519C")
plotcorr(xc, col=colors[5*xc + 6])

]]>

</rgg>




########################################################################################
# name: Stacked Histogram
# author: Holger Brandl
# category: basic/histograms
# preview: stacked-histogram.png

Displays a stacked histogram for a numerical attribute

######

<rgg>

    <!--1. Title and short description -->

    <h3 text="$$$TEMPLATE_NAME$$$" aligment="center" span="full"/>
    <separator label="Description" span="full"/>
    <labelarea span="full">$$$TEMPLATE_DESC$$$</labelarea>
    <gaprow height="1"/>


    <!-- 2. Configuration-->

    <separator label="Options" span="full"/>
    <gaprow height="2"/>

    # 1. Parameter selection

    <group>

        # a) Define the attribute of interest
        numAttributeName =<combobox items="$$$NUM_ATTRIBUTES$$$" label="Variable of interest"/>;
        numAttributeIndex = which(names(kIn) ==  numAttributeName);

        # 2) Define the label-column (factor)
        labelVariable = <combobox items="$$$STR_ATTRIBUTES$$$" label="Factor"/>;
        labelVariableIndex = which(names(kIn) ==  labelVariable);


        # c) the title of the plot
        <textfield label="Title of the plot:" var="plotTitle" data-type="text" default-value="my plot" size="10" span="full"/>

    </group>


    # 2. r-code

    <![CDATA[


library(ggplot2)


newdata <- data.frame(readout = kIn[,numAttributeIndex], groupby = kIn[,labelVariableIndex])

m <- ggplot(newdata, aes(x=readout, fill=groupby)) +  opts(title = plotTitle) + geom_histogram() + xlab(numAttributeName);

print(m)


    ]]>

</rgg>